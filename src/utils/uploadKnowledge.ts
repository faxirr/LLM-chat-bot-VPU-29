// src/utils/uploadKnowledge.ts
// –£—Ç–∏–ª—ñ—Ç–∞ –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤–∞—à–æ—ó –±–∞–∑–∏ –∑–Ω–∞–Ω—å —É Pinecone

// –ü–æ–ª—ñ—Ñ—ñ–ª –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–Ω–æ–≥–æ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
if (typeof global === 'undefined') {
    (window as any).global = globalThis;
}

import { SUBJECTS, LEARNING_RESOURCES } from '../config/knowledge';
import { Pinecone } from '@pinecone-database/pinecone';
import type { Topic } from '../types/knowledge';

const GEMINI_EMBEDDING_ENDPOINT = 'https://generativelanguage.googleapis.com/v1beta/models/text-embedding-004:embedContent';
const GEMINI_API_KEY = import.meta.env.VITE_GEMINI_API_KEY;
const PINECONE_API_KEY = import.meta.env.VITE_PINECONE_API_KEY;
const PINECONE_INDEX_NAME = 'vpu29';
const PINECONE_NAMESPACE = 'INFO';

const pinecone = new Pinecone({
    apiKey: PINECONE_API_KEY || '',
});

// –°—Ç–≤–æ—Ä–µ–Ω–Ω—è embeddings —á–µ—Ä–µ–∑ Gemini
async function createEmbedding(text: string): Promise<number[]> {
    const response = await fetch(`${GEMINI_EMBEDDING_ENDPOINT}?key=${GEMINI_API_KEY}`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
            model: "models/text-embedding-004",
            content: {
                parts: [{ text: text.substring(0, 5000) }]
            }
        })
    });

    if (!response.ok) {
        throw new Error(`Gemini API failed: ${response.status}`);
    }

    const data = await response.json();
    return data.embedding.values;
}

// –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è knowledge.ts —É —Ç–µ–∫—Å—Ç–∏ –¥–ª—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
function convertKnowledgeToTexts(): Array<{id: string, text: string, metadata: Record<string, any>}> {
    const texts: Array<{id: string, text: string, metadata: Record<string, any>}> = [];
    let counter = 0;

    // –û–±—Ä–æ–±–∫–∞ SUBJECTS
    Object.entries(SUBJECTS).forEach(([subjectKey, subject]) => {
        subject.topics.forEach((topic: Topic) => {
            // –û—Å–Ω–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Ç–µ–º—É
            const topicText = `
–ü—Ä–µ–¥–º–µ—Ç: ${subjectKey === 'mathematics' ? '–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞' : '–§—ñ–∑–∏–∫–∞'}
–†–æ–∑–¥—ñ–ª: ${topic.name}
–ü—ñ–¥—Ç–µ–º–∏: ${topic.subtopics.join(', ')}

–¶–µ –æ—Å–Ω–æ–≤–Ω–∞ —Ç–µ–º–∞ –∑ –ø—Ä–µ–¥–º–µ—Ç—É ${subjectKey === 'mathematics' ? '–º–∞—Ç–µ–º–∞—Ç–∏–∫–∏' : '—Ñ—ñ–∑–∏–∫–∏'} –ø—ñ–¥ –Ω–∞–∑–≤–æ—é "${topic.name}". 
–í–æ–Ω–∞ –≤–∫–ª—é—á–∞—î –Ω–∞—Å—Ç—É–ø–Ω—ñ –ø—ñ–¥—Ç–µ–º–∏: ${topic.subtopics.join(', ')}.
      `.trim();

            texts.push({
                id: `subject-${subjectKey}-${counter++}`,
                text: topicText,
                metadata: {
                    type: 'subject_topic',
                    subject: subjectKey,
                    topic: topic.name,
                    subtopics: topic.subtopics,
                    text: topicText
                }
            });

            // –ü—Ä–∏–∫–ª–∞–¥–∏ (—è–∫—â–æ —î)
            if ('examples' in topic && topic.examples) {
                Object.entries(topic.examples as Record<string, string>).forEach(([exampleKey, example]) => {
                    const exampleText = `
–ü—Ä–µ–¥–º–µ—Ç: ${subjectKey === 'mathematics' ? '–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞' : '–§—ñ–∑–∏–∫–∞'}
–¢–µ–º–∞: ${exampleKey}
–ü—Ä–∏–∫–ª–∞–¥: ${example}

–î–ª—è –≤–∏–≤—á–µ–Ω–Ω—è —Ç–µ–º–∏ "${exampleKey}" –∑ –ø—Ä–µ–¥–º–µ—Ç—É ${subjectKey === 'mathematics' ? '–º–∞—Ç–µ–º–∞—Ç–∏–∫–∏' : '—Ñ—ñ–∑–∏–∫–∏'} 
–º–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –Ω–∞—Å—Ç—É–ø–Ω–∏–π –ø—Ä–∏–∫–ª–∞–¥: ${example}
          `.trim();

                    texts.push({
                        id: `example-${subjectKey}-${counter++}`,
                        text: exampleText,
                        metadata: {
                            type: 'example',
                            subject: subjectKey,
                            topic: topic.name,
                            subtopic: exampleKey,
                            example: example,
                            text: exampleText
                        }
                    });
                });
            }

            // –§–æ—Ä–º—É–ª–∏ (—è–∫—â–æ —î)
            if ('formulas' in topic && topic.formulas) {
                Object.entries(topic.formulas as Record<string, string>).forEach(([formulaKey, formula]) => {
                    const formulaText = `
–ü—Ä–µ–¥–º–µ—Ç: ${subjectKey === 'mathematics' ? '–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞' : '–§—ñ–∑–∏–∫–∞'}
–†–æ–∑–¥—ñ–ª: ${topic.name}
–§–æ—Ä–º—É–ª–∞ –¥–ª—è –æ–±—á–∏—Å–ª–µ–Ω–Ω—è: ${formulaKey}
–§–æ—Ä–º—É–ª–∞: ${formula}

–î–ª—è —Ä–æ–∑–≤'—è–∑–∞–Ω–Ω—è –∑–∞–¥–∞—á –Ω–∞ —Ç–µ–º—É "${formulaKey}" –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è —Ñ–æ—Ä–º—É–ª–∞: ${formula}
–¶—è —Ñ–æ—Ä–º—É–ª–∞ –Ω–∞–ª–µ–∂–∏—Ç—å –¥–æ —Ä–æ–∑–¥—ñ–ª—É "${topic.name}" –ø—Ä–µ–¥–º–µ—Ç—É ${subjectKey === 'mathematics' ? '–º–∞—Ç–µ–º–∞—Ç–∏–∫–∏' : '—Ñ—ñ–∑–∏–∫–∏'}.
          `.trim();

                    texts.push({
                        id: `formula-${subjectKey}-${counter++}`,
                        text: formulaText,
                        metadata: {
                            type: 'formula',
                            subject: subjectKey,
                            topic: topic.name,
                            formula_name: formulaKey,
                            formula: formula,
                            text: formulaText
                        }
                    });
                });
            }
        });
    });

    // –û–±—Ä–æ–±–∫–∞ LEARNING_RESOURCES
    LEARNING_RESOURCES.websites.forEach((website) => {
        const websiteText = `
–ù–∞–≤—á–∞–ª—å–Ω–∏–π —Ä–µ—Å—É—Ä—Å: ${website.name}
–û–ø–∏—Å: ${website.description}
–ü–æ—Å–∏–ª–∞–Ω–Ω—è: ${website.url}

${website.name} - —Ü–µ –∫–æ—Ä–∏—Å–Ω–∏–π –æ—Å–≤—ñ—Ç–Ω—ñ–π —Ä–µ—Å—É—Ä—Å –¥–ª—è –Ω–∞–≤—á–∞–Ω–Ω—è. ${website.description}
–í–∏ –º–æ–∂–µ—Ç–µ –∑–Ω–∞–π—Ç–∏ –π–æ–≥–æ –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º: ${website.url}
    `.trim();

        texts.push({
            id: `website-${counter++}`,
            text: websiteText,
            metadata: {
                type: 'learning_resource',
                resource_type: 'website',
                name: website.name,
                url: website.url,
                description: website.description,
                text: websiteText
            }
        });
    });

    LEARNING_RESOURCES.books.forEach((book) => {
        const bookText = `
–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∞ –∫–Ω–∏–≥–∞: ${book.title}
–ê–≤—Ç–æ—Ä: ${book.author}
–†—ñ–∫ –≤–∏–¥–∞–Ω–Ω—è: ${book.year}

"${book.title}" –∞–≤—Ç–æ—Ä–∞ ${book.author} (${book.year} —Ä—ñ–∫) - —Ü–µ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∏–π –ø—ñ–¥—Ä—É—á–Ω–∏–∫ –¥–ª—è –Ω–∞–≤—á–∞–Ω–Ω—è.
–¶—è –∫–Ω–∏–≥–∞ –¥–æ–ø–æ–º–æ–∂–µ –ø–æ–≥–ª–∏–±–∏—Ç–∏ –∑–Ω–∞–Ω–Ω—è –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç—É.
    `.trim();

        texts.push({
            id: `book-${counter++}`,
            text: bookText,
            metadata: {
                type: 'learning_resource',
                resource_type: 'book',
                title: book.title,
                author: book.author,
                year: book.year,
                text: bookText
            }
        });
    });

    return texts;
}

// –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —É Pinecone
export async function uploadKnowledgeToPinecone(): Promise<string> {
    try {
        if (!GEMINI_API_KEY) {
            return '‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ–π VITE_GEMINI_API_KEY';
        }

        if (!PINECONE_API_KEY) {
            return '‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ–π VITE_PINECONE_API_KEY';
        }

        console.log('üöÄ –ü–æ—á–∞—Ç–æ–∫ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–Ω–∞–Ω—å —É Pinecone...');

        const knowledgeTexts = convertKnowledgeToTexts();
        console.log(`üìö –ü—ñ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ ${knowledgeTexts.length} —Ç–µ–∫—Å—Ç—ñ–≤ –¥–ª—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó`);

        const index = pinecone.index(PINECONE_INDEX_NAME);
        const vectors = [];

        // –°—Ç–≤–æ—Ä—é—î–º–æ embeddings –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç—É
        for (let i = 0; i < knowledgeTexts.length; i++) {
            const item = knowledgeTexts[i];
            console.log(`üîÑ –û–±—Ä–æ–±–∫–∞ ${i + 1}/${knowledgeTexts.length}: ${item.metadata.type} - ${item.metadata.subject || item.metadata.name || 'resource'}`);

            try {
                const embedding = await createEmbedding(item.text);

                vectors.push({
                    id: item.id,
                    values: embedding,
                    metadata: {
                        ...item.metadata,
                        source: 'knowledge_base',
                        created_at: new Date().toISOString(),
                        content_length: item.text.length
                    }
                });

                // –ü–∞—É–∑–∞ –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è rate limits
                await new Promise(resolve => setTimeout(resolve, 200));

            } catch (embeddingError) {
                console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è embedding –¥–ª—è ${item.id}:`, embeddingError);
                continue; // –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Ü–µ–π –µ–ª–µ–º–µ–Ω—Ç —ñ –ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ
            }
        }

        if (vectors.length === 0) {
            return '‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∂–æ–¥–Ω–æ–≥–æ –≤–µ–∫—Ç–æ—Ä–∞';
        }

        console.log(`‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ ${vectors.length} –≤–µ–∫—Ç–æ—Ä—ñ–≤. –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —É Pinecone...`);

        // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —É Pinecone –±–∞—Ç—á–∞–º–∏
        const batchSize = 50; // –ó–º–µ–Ω—à—É—î–º–æ —Ä–æ–∑–º—ñ—Ä –±–∞—Ç—á—É –¥–ª—è –Ω–∞–¥—ñ–π–Ω–æ—Å—Ç—ñ
        let uploadedCount = 0;

        for (let i = 0; i < vectors.length; i += batchSize) {
            const batch = vectors.slice(i, i + batchSize);

            try {
                await index.upsert(batch, { namespace: PINECONE_NAMESPACE });
                uploadedCount += batch.length;
                console.log(`‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –±–∞—Ç—á ${Math.floor(i / batchSize) + 1}/${Math.ceil(vectors.length / batchSize)} (${uploadedCount}/${vectors.length})`);

                // –ü–∞—É–∑–∞ –º—ñ–∂ –±–∞—Ç—á–∞–º–∏
                await new Promise(resolve => setTimeout(resolve, 500));

            } catch (uploadError) {
                console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –±–∞—Ç—á—É ${Math.floor(i / batchSize) + 1}:`, uploadError);
            }
        }

        return `‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –°—Ç–≤–æ—Ä–µ–Ω–æ ${uploadedCount} –≤–µ–∫—Ç–æ—Ä—ñ–≤ —É Pinecone (namespace: ${PINECONE_NAMESPACE})`;

    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è:', error);
        return `‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: ${error instanceof Error ? error.message : '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞'}`;
    }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è namespace (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
export async function clearPineconeNamespace(): Promise<string> {
    try {
        if (!PINECONE_API_KEY) {
            return '‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ–π VITE_PINECONE_API_KEY';
        }

        const index = pinecone.index(PINECONE_INDEX_NAME);
        await index.deleteAll({ namespace: PINECONE_NAMESPACE });
        return `‚úÖ Namespace "${PINECONE_NAMESPACE}" –æ—á–∏—â–µ–Ω–æ`;
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è:', error);
        return `‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è: ${error instanceof Error ? error.message : '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞'}`;
    }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞–Ω—É namespace
export async function checkNamespaceStats(): Promise<string> {
    try {
        if (!PINECONE_API_KEY) {
            return '‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ–π VITE_PINECONE_API_KEY';
        }

        const index = pinecone.index(PINECONE_INDEX_NAME);
        const stats = await index.describeIndexStats();

        const namespaceStats = stats.namespaces?.[PINECONE_NAMESPACE];
        if (!namespaceStats) {
            return `üìä Namespace "${PINECONE_NAMESPACE}" –ø–æ—Ä–æ–∂–Ω—ñ–π –∞–±–æ –Ω–µ —ñ—Å–Ω—É—î`;
        }

        return `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ namespace "${PINECONE_NAMESPACE}":
- –ö—ñ–ª—å–∫—ñ—Å—Ç—å –≤–µ–∫—Ç–æ—Ä—ñ–≤: ${namespaceStats.vectorCount}
- –†–æ–∑–º—ñ—Ä: ${(namespaceStats.vectorCount || 0)} records`;

    } catch (error) {
        return `‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ${error instanceof Error ? error.message : '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞'}`;
    }
}